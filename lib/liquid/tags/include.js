// Generated by CoffeeScript 1.7.1
(function() {
  var Include, Liquid, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  fs = require('fs');

  module.exports = Include = (function(_super) {
    var Syntax, SyntaxHelp;

    __extends(Include, _super);

    Syntax = RegExp("(" + Liquid.QuotedFragment.source + ")");

    SyntaxHelp = "Syntax Error in 'include' - Valid syntax: include [templateName]";

    function Include(template, tagName, markup, tokens) {
      var match;
      match = Syntax.exec(markup);
      if (!match) {
        throw new Liquid.SyntaxError(SyntaxHelp);
      }
      Include.__super__.constructor.apply(this, arguments);
      this.engine = template.engine;
      this.templateName = match[1];
    }

    Include.prototype.parse = function(tokens) {};

    Include.prototype.render = function(context) {
      this.templateName = context.resolve(this.templateName);
      return this.loadCachedPartial(context).then(function(partial) {
        return partial.render(context);
      });
    };

    Include.prototype.loadCachedPartial = function(context) {
      var cached, cachedPartials;
      cachedPartials = context.registers['cachedPartials'] || {};
      cached = cachedPartials[this.templateName];
      if (cached) {
        return cached;
      }
      return this.readTemplateFromFileSystem(context).then((function(_this) {
        return function(source) {
          var parsed;
          parsed = _this.engine.parse(source);
          cachedPartials[_this.templateName] = parsed;
          context.registers['cachedPartials'] = cachedPartials;
          return parsed;
        };
      })(this));
    };

    Include.prototype.readTemplateFromFileSystem = function(context) {
      return Liquid.Template.fileSystem.readTemplateFile(this.templateName);
    };

    return Include;

  })(Liquid.Tag);

}).call(this);

//# sourceMappingURL=include.map
